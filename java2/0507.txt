객체 중심 프로그래밍
	캡슐
	상속
		왜??
		추상	(*)
		다형	(*)
1.객체 형변환
	=> Collection Framework
	*Framework	-짜여진 틀	-> 사용방법
2.추상(추출:abstraction)
	논문 요약 - abstraction

	*추상클래스 / 인터페이스
	*추상메서드


	abstract class 클래스 		-추상 클래스(일반메서드)
		abstract	자료형 메서드명 	-추상메서드

	*상속 전제로 만들어진 클래스
	*상속 자신이 메서드를 재정의하지 않으면- 추상 클래스

InterA		interface
	methodA()
(상속)				(상속)
		
InterB				InterC
	methodB()			methodC()
(구현)
ClassA

클래스
	=> 자료형
		외부 - 지속적 사용
		내부 - 한번 사용 버림

내부클래스
	인스턴스 중첩 클래스	-인스턴스 멤버 필드
	클래스 중첩 클래스		-클래스 멤버 필드
	지역 중첩 클래스		-지역변수
	익명 중첩 클래스		-X

고급 에러 처리

컴파일 에러	-javac
	이클립스	-빨간줄
	-오타,문법
런타임(실행)에러	-java	(*)
	*논리적 - 제어문 ...
	=> Exception

if ~ else ~

=>	try{ 
	익셉션이 발생할 수 있는 구역
	} catch(익셉션클래스명 변수) {
	}
데이터

임시 데이터
	*변수/상수
		*Collection Framework
영구 데이터
	로컬 - 프로그램과 같이있는 데이터 
		파일
	원격 - 원격에 존재하는 데이터
		데이터베이스
java.io.File








